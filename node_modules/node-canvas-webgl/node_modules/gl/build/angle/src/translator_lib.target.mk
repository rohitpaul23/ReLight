# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := translator_lib
DEFS_Debug := \
	'-DNODE_GYP_MODULE_NAME=translator_lib' \
	'-DUSING_UV_SHARED=1' \
	'-DUSING_V8_SHARED=1' \
	'-DV8_DEPRECATION_WARNINGS=1' \
	'-DV8_DEPRECATION_WARNINGS' \
	'-DV8_IMMINENT_DEPRECATION_WARNINGS' \
	'-D_GLIBCXX_USE_CXX11_ABI=1' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-D__STDC_FORMAT_MACROS' \
	'-DOPENSSL_NO_PINSHARED' \
	'-DOPENSSL_THREADS' \
	'-DANGLE_TRANSLATOR_STATIC' \
	'-DANGLE_ENABLE_ESSL' \
	'-DANGLE_ENABLE_GLSL' \
	'-D_DEBUG' \
	'-DDEBUG' \
	'-DV8_ENABLE_CHECKS'

# Flags passed to all source files.
CFLAGS_Debug := \
	-fPIC \
	-pthread \
	-Wall \
	-Wchar-subscripts \
	-Wextra \
	-Wformat=2 \
	-Winit-self \
	-Wnon-virtual-dtor \
	-Wno-format-nonliteral \
	-Wno-unknown-pragmas \
	-Wno-unused-function \
	-Wno-unused-parameter \
	-Wpacked \
	-Wpointer-arith \
	-Wundef \
	-Wwrite-strings \
	-fPIC \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-m64 \
	-g \
	-O0 \
	-O0 \
	-g

# Flags passed to only C files.
CFLAGS_C_Debug :=

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-std=c++0x \
	-fno-exceptions \
	-fno-rtti \
	-fno-exceptions \
	-std=gnu++14

INCS_Debug := \
	-I/home/ec2-user/.cache/node-gyp/16.20.2/include/node \
	-I/home/ec2-user/.cache/node-gyp/16.20.2/src \
	-I/home/ec2-user/.cache/node-gyp/16.20.2/deps/openssl/config \
	-I/home/ec2-user/.cache/node-gyp/16.20.2/deps/openssl/openssl/include \
	-I/home/ec2-user/.cache/node-gyp/16.20.2/deps/uv/include \
	-I/home/ec2-user/.cache/node-gyp/16.20.2/deps/zlib \
	-I/home/ec2-user/.cache/node-gyp/16.20.2/deps/v8/include \
	-I$(srcdir)/angle/src \
	-I$(srcdir)/angle/include \
	-I$(srcdir)/angle/src \
	-I$(srcdir)/angle/include

DEFS_Release := \
	'-DNODE_GYP_MODULE_NAME=translator_lib' \
	'-DUSING_UV_SHARED=1' \
	'-DUSING_V8_SHARED=1' \
	'-DV8_DEPRECATION_WARNINGS=1' \
	'-DV8_DEPRECATION_WARNINGS' \
	'-DV8_IMMINENT_DEPRECATION_WARNINGS' \
	'-D_GLIBCXX_USE_CXX11_ABI=1' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-D__STDC_FORMAT_MACROS' \
	'-DOPENSSL_NO_PINSHARED' \
	'-DOPENSSL_THREADS' \
	'-DANGLE_TRANSLATOR_STATIC' \
	'-DANGLE_ENABLE_ESSL' \
	'-DANGLE_ENABLE_GLSL' \
	'-DNDEBUG'

# Flags passed to all source files.
CFLAGS_Release := \
	-fPIC \
	-pthread \
	-Wall \
	-Wchar-subscripts \
	-Wextra \
	-Wformat=2 \
	-Winit-self \
	-Wnon-virtual-dtor \
	-Wno-format-nonliteral \
	-Wno-unknown-pragmas \
	-Wno-unused-function \
	-Wno-unused-parameter \
	-Wpacked \
	-Wpointer-arith \
	-Wundef \
	-Wwrite-strings \
	-fPIC \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-m64 \
	-O3 \
	-fno-omit-frame-pointer

# Flags passed to only C files.
CFLAGS_C_Release :=

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-std=c++0x \
	-fno-exceptions \
	-fno-rtti \
	-fno-exceptions \
	-std=gnu++14

INCS_Release := \
	-I/home/ec2-user/.cache/node-gyp/16.20.2/include/node \
	-I/home/ec2-user/.cache/node-gyp/16.20.2/src \
	-I/home/ec2-user/.cache/node-gyp/16.20.2/deps/openssl/config \
	-I/home/ec2-user/.cache/node-gyp/16.20.2/deps/openssl/openssl/include \
	-I/home/ec2-user/.cache/node-gyp/16.20.2/deps/uv/include \
	-I/home/ec2-user/.cache/node-gyp/16.20.2/deps/zlib \
	-I/home/ec2-user/.cache/node-gyp/16.20.2/deps/v8/include \
	-I$(srcdir)/angle/src \
	-I$(srcdir)/angle/include \
	-I$(srcdir)/angle/src \
	-I$(srcdir)/angle/include

OBJS := \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/BuiltInFunctionEmulator.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/Cache.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/CallDAG.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/CodeGen.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/Compiler.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/Diagnostics.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/DirectiveHandler.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/EmulatePrecision.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/FlagStd140Structs.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/ForLoopUnroll.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/InfoSink.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/Initialize.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/InitializeDll.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/InitializeParseContext.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/InitializeVariables.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/IntermNode.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/IntermTraverse.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/Intermediate.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/LoopInfo.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/Operator.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/ParseContext.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/PoolAlloc.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/PruneEmptyDeclarations.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/RecordConstantPrecision.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/RegenerateStructNames.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/RemovePow.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/RewriteDoWhile.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/ScalarizeVecAndMatConstructorArgs.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/SearchSymbol.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/SymbolTable.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/Types.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/UnfoldShortCircuitAST.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/ValidateGlobalInitializer.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/ValidateLimitations.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/ValidateMaxParameters.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/ValidateOutputs.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/ValidateSwitch.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/VariableInfo.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/VariablePacker.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/blocklayout.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/depgraph/DependencyGraph.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/depgraph/DependencyGraphBuilder.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/depgraph/DependencyGraphOutput.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/depgraph/DependencyGraphTraverse.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/glslang_lex.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/glslang_tab.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/intermOut.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/timing/RestrictFragmentShaderTiming.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/timing/RestrictVertexShaderTiming.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/util.o \
	$(obj).target/$(TARGET)/angle/src/third_party/compiler/ArrayBoundsClamper.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/OutputESSL.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/TranslatorESSL.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/BuiltInFunctionEmulatorGLSL.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/ExtensionGLSL.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/OutputGLSL.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/OutputGLSLBase.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/TranslatorGLSL.o \
	$(obj).target/$(TARGET)/angle/src/compiler/translator/VersionGLSL.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-pthread \
	-pthread \
	-rdynamic \
	-m64

LDFLAGS_Release := \
	-pthread \
	-pthread \
	-rdynamic \
	-m64

LIBS :=

$(obj).target/angle/src/translator_lib.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/angle/src/translator_lib.a: LIBS := $(LIBS)
$(obj).target/angle/src/translator_lib.a: TOOLSET := $(TOOLSET)
$(obj).target/angle/src/translator_lib.a: $(OBJS)
	$(call create_archive,$@,$^)

# Add target alias
.PHONY: translator_lib
translator_lib: $(obj).target/angle/src/translator_lib.a

# Add target alias to "all" target.
.PHONY: all
all: translator_lib

# Add target alias
.PHONY: translator_lib
translator_lib: $(builddir)/translator_lib.a

# Copy this to the static library output path.
$(builddir)/translator_lib.a: TOOLSET := $(TOOLSET)
$(builddir)/translator_lib.a: $(obj).target/angle/src/translator_lib.a FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += $(builddir)/translator_lib.a
# Short alias for building this static library.
.PHONY: translator_lib.a
translator_lib.a: $(obj).target/angle/src/translator_lib.a $(builddir)/translator_lib.a

# Add static library to "all" target.
.PHONY: all
all: $(builddir)/translator_lib.a

